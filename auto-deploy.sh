#!/bin/bash

echo "üöÄ –ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –¥–µ–ø–ª–æ—è M&A AI Platform"
echo "================================================"
echo ""

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
check_dependencies() {
    echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    if ! command -v git &> /dev/null; then
        echo "‚ùå Git –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    if ! command -v node &> /dev/null; then
        echo "‚ùå Node.js –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    if ! command -v npm &> /dev/null; then
        echo "‚ùå npm –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    echo "‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    echo ""
}

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Vercel CLI
install_vercel() {
    echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Vercel CLI..."
    if ! command -v vercel &> /dev/null; then
        npm install -g vercel
    fi
    echo "‚úÖ Vercel CLI –≥–æ—Ç–æ–≤"
    echo ""
}

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Vercel
auth_vercel() {
    echo "üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Vercel..."
    if ! vercel whoami &> /dev/null; then
        echo "–û—Ç–∫—Ä–æ–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏..."
        vercel login
    fi
    echo "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Vercel –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
    echo ""
}

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤ Vercel
create_vercel_project() {
    echo "üèóÔ∏è  –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤ Vercel..."
    vercel --yes --prod
    echo "‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –≤ Vercel"
    echo ""
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Vercel
setup_vercel_env() {
    echo "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Vercel..."
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º NEXTAUTH_SECRET
    NEXTAUTH_SECRET=$(openssl rand -base64 32)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    echo "$NEXTAUTH_SECRET" | vercel env add NEXTAUTH_SECRET production
    echo "sk-demo-key" | vercel env add OPENAI_API_KEY production
    
    echo "‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ Vercel"
    echo ""
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GitHub Secrets
setup_github_secrets() {
    echo "üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GitHub Secrets..."
    
    if [ -z "$GITHUB_TOKEN" ]; then
        echo "‚ö†Ô∏è  GITHUB_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É GitHub Secrets"
        echo "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω: export GITHUB_TOKEN='–≤–∞—à_—Ç–æ–∫–µ–Ω'"
        echo "–ó–∞—Ç–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç–µ: ./setup-github-secrets.sh"
        echo ""
        return
    fi
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ–∫—Ä–µ—Ç—ã
    NEXTAUTH_SECRET=$(openssl rand -base64 32)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ä–µ—Ç—ã —á–µ—Ä–µ–∑ API
    REPO_OWNER="AlexSevryuga"
    REPO_NAME="ma-platform"
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á
    PUBLIC_KEY_RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
        "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/actions/secrets/public-key")
    
    PUBLIC_KEY=$(echo "$PUBLIC_KEY_RESPONSE" | jq -r '.key')
    KEY_ID=$(echo "$PUBLIC_KEY_RESPONSE" | jq -r '.key_id')
    
    if [ "$PUBLIC_KEY" != "null" ] && [ -n "$PUBLIC_KEY" ]; then
        # –î–æ–±–∞–≤–ª—è–µ–º NEXTAUTH_SECRET
        ENCRYPTED_SECRET=$(echo -n "$NEXTAUTH_SECRET" | openssl pkeyutl -encrypt -pubin -inkey <(echo "$PUBLIC_KEY" | base64 -d) | base64)
        
        curl -s -X PUT \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/actions/secrets/NEXTAUTH_SECRET" \
            -d "{\"encrypted_value\":\"$ENCRYPTED_SECRET\",\"key_id\":\"$KEY_ID\"}" > /dev/null
        
        echo "‚úÖ GitHub Secrets –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
    else
        echo "‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å GitHub Secrets –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
    fi
    echo ""
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GitHub Integration –≤ Vercel
setup_github_integration() {
    echo "üîó –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GitHub Integration –≤ Vercel..."
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
    PROJECT_INFO=$(vercel project ls --json 2>/dev/null | jq -r '.[0]')
    
    if [ "$PROJECT_INFO" != "null" ] && [ -n "$PROJECT_INFO" ]; then
        PROJECT_ID=$(echo "$PROJECT_INFO" | jq -r '.id')
        PROJECT_NAME=$(echo "$PROJECT_INFO" | jq -r '.name')
        
        echo "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ:"
        echo "   ID: $PROJECT_ID"
        echo "   Name: $PROJECT_NAME"
        echo ""
        echo "üîó –ù–∞—Å—Ç—Ä–æ–π—Ç–µ GitHub Integration –≤—Ä—É—á–Ω—É—é:"
        echo "   https://vercel.com/dashboard/project/$PROJECT_ID/settings/git"
        echo ""
    fi
}

# –§–∏–Ω–∞–ª—å–Ω—ã–π –¥–µ–ø–ª–æ–π
final_deploy() {
    echo "üöÄ –§–∏–Ω–∞–ª—å–Ω—ã–π –¥–µ–ø–ª–æ–π..."
    vercel --prod
    echo ""
}

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
show_results() {
    echo "üéâ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
    echo ""
    echo "üì± –í–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É:"
    echo "   https://ma-platform.vercel.app"
    echo ""
    echo "üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:"
    echo "   Vercel Dashboard: https://vercel.com/dashboard"
    echo "   GitHub Repository: https://github.com/AlexSevryuga/ma-platform"
    echo "   GitHub Actions: https://github.com/AlexSevryuga/ma-platform/actions"
    echo ""
    echo "üîß –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
    echo "   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
    echo "   2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–æ–º–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
    echo "   3. –î–æ–±–∞–≤—å—Ç–µ Collaborators"
    echo "   4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
    echo ""
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    check_dependencies
    install_vercel
    auth_vercel
    create_vercel_project
    setup_vercel_env
    setup_github_secrets
    setup_github_integration
    final_deploy
    show_results
}

# –ó–∞–ø—É—Å–∫
main 